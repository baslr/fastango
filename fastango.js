// Generated by CoffeeScript 1.9.1
(function() {
  var FastangoCursor, fastango;

  FastangoCursor = function(cursorUrl, parser, body) {
    var _count, _id, _idx, _more, _result, e;
    try {
      body = JSON.parse(body);
    } catch (_error) {
      e = _error;
      body = {
        code: 500
      };
    }
    if (body.code === 201) {
      _result = body.result;
      _more = !!body.hasMore;
      _count = body.count;
      _id = body.id;
      _idx = 0;
    }
    console.log('- - - - -');
    console.log("more " + _more);
    console.log("count " + _count);
    console.log("id " + _id);
    console.log('- - - - -');
    return {
      _all: function(cb) {
        return this._more((function(_this) {
          return function(status) {
            if (status !== 200 || !_more) {
              return cb(status);
            }
            return _this._all(cb);
          };
        })(this));
      },
      _more: function(cb) {
        if (!_more) {
          return cb(200);
        }
        return parser.put(cursorUrl + _id, null, function(status, headers, data) {
          if (status !== 200) {
            return cb(status);
          }
          try {
            data = JSON.parse(data);
          } catch (_error) {
            return cb(500);
          }
          _result.push.apply(_result, data.result);
          _more = data.hasMore;
          return cb(status);
        });
      },
      all: function(cb) {
        return this._all(function(status) {
          _idx = _result.length;
          try {
            return cb(status, _result);
          } catch (_error) {}
        });
      },
      next: function(cb) {},
      hasNext: function() {
        return _more || _index < _result.length;
      }
    };
  };

  fastango = function(parser, currentDb, cb) {
    var obj, setupCollection;
    obj = {
      _db: function() {
        return currentDb;
      },
      _use: function(newDb, cb) {
        return fastango(parser, newDb, cb);
      },
      _queryUrl: "/_db/" + currentDb + "/_api/cursor",
      _transactionUrl: "/_db/" + currentDb + "/_api/transaction",
      _postCollection: "/_db/" + currentDb + "/_api/collection",
      _query: function(q, bindVars, opts, cb) {
        var data;
        if (typeof bindVars === 'function') {
          cb = bindVars;
          bindVars = void 0;
        }
        if (typeof opts === 'function') {
          cb = opts;
          opts = void 0;
        }
        data = {
          query: q,
          bindVars: bindVars || void 0,
          batchSize: opts && opts.batchSize || void 0,
          ttl: opts && opts.ttl || void 0,
          count: opts && opts.count || false,
          options: {
            fullCount: opts && opts.fullCount || false,
            maxPlans: opts && opts.maxPlans || void 0,
            'optimizer.rules': opts && opts.optimizerRules || void 0
          }
        };
        return parser.post(this._queryUrl, new Buffer(JSON.stringify(data), 'utf8'), (function(_this) {
          return function(status, headers, body) {
            console.log(status);
            console.log(headers);
            console.log(body);
            console.log('cb cursor');
            return cb(status, FastangoCursor(_this._queryUrl + "/", parser, body));
          };
        })(this));
      },
      _transaction: function(opts, func, cb) {
        var body, e;
        console.log('fastango _transaction');
        body = {
          action: String(func),
          collections: opts.collections || {},
          waitForSync: opts.waitForSync || void 0,
          lockTimeout: opts.lockTimeout || void 0,
          params: opts.params || void 0
        };
        console.log('fastango post transaction');
        try {
          return parser.post(this._transactionUrl, new Buffer(JSON.stringify(body), 'utf8'), cb);
        } catch (_error) {
          e = _error;
          return console.log(e);
        }
      },
      _createDocumentCollection: function(name, options, cb) {
        if (typeof options === 'function') {
          cb = options;
          options = {};
        }
        options.name = name;
        return parser.post(this._postCollection, new Buffer(JSON.stringify(options), 'utf8'), function(status, headers, body) {
          if (200 === status) {
            setupCollection(name);
          }
          return cb(status, headers, body);
        });
      }
    };
    setupCollection = function(colName) {
      obj[colName] = {
        urls: {}
      };
      obj[colName].urls['GET_DOC'] = "/_db/" + currentDb + "/_api/document/" + colName + "/";
      obj[colName].urls['POST_DOC'] = "/_db/" + currentDb + "/_api/document?collection=" + colName;
      obj[colName].urls['TRUNCATE_COL'] = "/_db/" + currentDb + "/_api/collection/" + colName + "/truncate";
      obj[colName].urls['DELETE_COL'] = "/_db/" + currentDb + "/_api/collection/" + colName;
      obj[colName].urls['DOC_COUNT'] = "/_db/" + currentDb + "/_api/collection/" + colName + "/count";

      /*
          DOCUMENT OPERATIONS
       */
      obj[colName].save = function(str, cb) {
        return parser.post(this.urls['POST_DOC'], new Buffer(str, 'utf8'), cb);
      };
      obj[colName].head = function(_key, cb) {
        return cb(501);
      };
      obj[colName].document = function(_key, cb) {
        return parser.get(this.urls['GET_DOC'] + _key, cb);
      };
      obj[colName].update = function(_key, str, cb) {
        return cb(501);
      };
      obj[colName].replace = function(_key, cb) {
        return cb(501);
      };
      obj[colName]["delete"] = function(_key, cb) {
        return cb(501);
      };
      obj[colName].all = function(cb) {
        return cb(501);
      };
      obj[colName].count = function(cb) {
        return parser.get(this.urls['DOC_COUNT'], cb);
      };

      /*
          COLLECTION OPERATIONS
       */
      obj[colName].truncate = function(cb) {
        return parser.put(this.urls['TRUNCATE_COL'], null, cb);
      };
      obj[colName].drop = function(cb) {
        return parser["delete"](this.urls['DELETE_COL'], function(status, headers, body) {
          if (200 === status) {
            obj[colName] = null;
            delete obj[colName];
            console.log('delete col because status is 200');
          }
          return cb(status, headers, body);
        });
      };
      obj[colName].load = function(cb) {
        return cb(501);
      };
      return obj[colName].unload = function(cb) {
        return cb(501);
      };
    };
    parser.get("/_db/" + currentDb + "/_api/collection?excludeSystem=true", function(status, headers, body) {
      var col, collections, e, i, len, ref;
      collections = JSON.parse(body);
      try {
        ref = collections.collections;
        for (i = 0, len = ref.length; i < len; i++) {
          col = ref[i];
          setupCollection(col.name);
        }
      } catch (_error) {
        e = _error;
        console.log(e);
      }
      try {
        return cb(status, obj);
      } catch (_error) {}
    });
    return obj;
  };

  module.exports = fastango;

}).call(this);
